import React, { useEffect, useState } from 'react';
import { HashRouter as Router, Route, Routes, Link, useParams } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useLocation } from 'react-router-dom';
import { Footer } from './Components/Footer/Footer';

interface Article {
  title: string;
  desc: string;
  fullDesc: string;
  articleId: number;
}

interface Story {
  title: string;
  desc: string;
  storyId: number;
  fullDesc: string;
}

const GeneralFooter = () => (
          <Footer
            Title={
              <h4>
                Website Created by <a title="Khian's official website" href="https://khian.netlify.app/">Khian Victory D. Calderon</a>
              </h4>
            }
            Description={
              <>
                Want to help Khian? {"-> "}
                <a href="https://khianvictorycalderon.github.io/donation/donate.html" className="btn btn-primary">Donate to Khian</a>
              </>
              }
            Logo="icons/Khian_Icon_Logo.png"  
            Style={{
              Background: "rgb(11, 14, 17)"
            }}

            MiscInfo={
              <>
                <div className="justify">
                  <h4><u>Privacy Policy</u>: </h4>
                  We value your privacy and are committed to safeguarding your personal information. Our website does not collect any personal data from visitors, except for basic analytics data gathered through Google Analytics. This information helps us understand how our site is used and improve your experience. We do not have control over the advertisements displayed on our site, which may vary based on third-party services. We encourage users to review the privacy policies of these advertisers to understand their data collection practices.
                  <br/><br/>
                  While we strive to protect your privacy, we cannot guarantee the security of information you disclose online. We recommend that you do not share any personal or sensitive information while browsing our website. By using our site, you acknowledge that you have read and understood this Privacy Policy. We reserve the right to modify this policy at any time, and any changes will be reflected on this page. Your continued use of the website after such changes signifies your acceptance of the new policy.
                  <br/><br/>
                  <h4><u>Terms and Conditions</u>: </h4>
                  By accessing our website, you agree to comply with and be bound by these Terms and Conditions. We kindly ask that you refrain from using ad blockers while browsing, as our revenue relies on the advertisements displayed. While you may still access our content with an ad blocker, we discourage this practice to support the sustainability of our site. Some articles on our website are generated by artificial intelligence, while others are crafted by human authors. We assure you that all Tagalog stories on our site are written by humans and not AI.
                  <br/><br/>
                  These Terms and Conditions govern your use of our website and apply to all visitors, users, and others who access or use the service. We reserve the right to make changes to these terms at any time without prior notice, and your continued use of the site constitutes acceptance of those changes. If you do not agree with any part of these terms, we recommend that you cease using our website immediately. We strive to provide accurate and up-to-date information, but we do not warrant that the content is free from errors or omissions. Your use of the website is at your own risk, and we are not liable for any damages that may arise from your use.
                  <br/><br/>
                </div>
                <hr/>
                <br/><br/>
                <p>
                All stories and articles data are now fetched from GitHub of Khian<br/>
                Updated January 31, 2025: New footer style
                </p>
              </>
            }
          />
)

const ScrollToTop = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    // Scroll to the top whenever the pathname changes
    window.scrollTo(0, 0);
  }, [pathname]);

  return null; // This component doesn't render anything
};

interface CardProps {
  item: {
    title: string;
    desc: string;
    articleId?: number;
    storyId?: number;
  };
  linkPath: string;
}

const Card: React.FC<CardProps> = ({ item, linkPath }) => (
  <Link to={linkPath} className="card no-design">
    <h3>{item.title}</h3>
    <p>{item.desc}</p>
  </Link>
);

const Ads = () => (
  <div id="container-587af9ea18c59be918ab5e7d451f6389"></div>
);

interface HomeProps {
  Articles: Article[];
  Stories: Story[];
}

const Home: React.FC<HomeProps> = ({ Articles, Stories }) => {
  const imageSource = "https://logos-world.net/wp-content/uploads/2023/08/React-Symbol.png";

  return (
    <>
      <Helmet>
        <title>Articles & Stories</title>
      </Helmet>
      <header className="header">
        <div className="headerBG"></div>
        <img className="logo-image img-fluid float-start" src={imageSource} alt="React Logo" />
        <div className="headerTitle text-light center">
          <h1>Explore Different Articles & Stories</h1>
        </div>
      </header>
      <div className="p-4 content">
        <h1><i>Read Interesting Articles & Stories!</i></h1>
        <p className="text-justify">
          Discover captivating articles and stories on my platform! Immerse yourself in a world of knowledge, inspiration, and entertainment...
        </p>
      </div>
      <div className="card-main bg-dark">
        <br />
        <h1 className="text-light center">Tagalog Stories:</h1>
        <div className="card-section bg-dark">
          {Stories.length === 0 ? (
            <div className="loading-message text-light center">Loading...</div>
          ) : (
            Stories.map((item: Story) => (
              <Card item={item} linkPath={`/story/${item.storyId}`} key={item.storyId} />
            ))
          )}
        </div>
        <Ads /><br /><br />
        <hr />
        <br />
        <h1 className="text-light center">Articles:</h1>
        <div className="card-section bg-dark">
          {Articles.length === 0 ? (
            <div className="loading-message text-light center">Loading...</div>
          ) : (
            Articles.map((item: Article) => (
              <Card item={item} linkPath={`/article/${item.articleId}`} key={item.articleId} />
            ))
          )}
        </div>
        <br />
        <hr />
      </div>
      <GeneralFooter/>
    </>
  );
};

const NotFound = () => (
  <div className="whitish text-light h-100vh center not-found">
    <h1>404: Page Not Found</h1>
    <h2>INVALID URL!</h2>
    <p>The page you are trying to access may be removed or there may be a typo in your URL.</p>
  </div>
);

interface ArticleProps {
  Articles: Article[];
}

const Article: React.FC<ArticleProps> = ({ Articles }) => {
  const { articleId } = useParams<{ articleId: string }>();
  const article = Articles.find((item: Article) => item.articleId === parseInt(articleId ?? '', 10));
  if (!article) {
    return <NotFound />;
  }
  return (
    <>
      <Helmet>
        <title>{`Article: ${article.title}`}</title>
        <meta name="description" content={`Article: ${article.desc}`} />
        <meta property="og:title" content={`Articles and Stories: ${article.title}`} />
        <meta property="og:description" content={`Article: ${article.desc}`} />
      </Helmet>
      <div className="article bg-dark">
        <Link to="/">{"<-"} Home</Link>
        <div className="center">
          <h1>{article.title}</h1>
        </div>
        <br/><Ads/><br/>
        <hr />
        <div dangerouslySetInnerHTML={{ __html: article.fullDesc }}></div>
      </div>
      <GeneralFooter />
    </>
  );
};

interface StoryProps {
  Stories: Story[];
}

const Story: React.FC<StoryProps> = ({ Stories }) => {
  const { storyId } = useParams<{ storyId: string }>();
  const story = Stories.find((item: Story) => item.storyId === parseInt(storyId ?? '', 10));
  if (!story) {
    return <NotFound />;
  }
  return (
    <>
      <Helmet>
        <title>{`Tagalog Story: ${story.title}`}</title>
        <meta name="description" content={`Tagalog Story: ${story.desc}`} />
        <meta property="og:title" content={`Articles and Stories: ${story.title}`} />
        <meta property="og:description" content={`Tagalog Story: ${story.desc}`} />
      </Helmet>
      <div className="story bg-dark">
        <Link to="/">{"<-"} Home</Link>
        <hr />
        <div className="center">
          <h1>{story.title}</h1>
        </div>
        <br/><Ads/><br/>
        <div className="justify" dangerouslySetInnerHTML={{ __html: story.fullDesc }}></div>
      </div>
      <GeneralFooter />
    </>
  );
};

const App = () => {
  // State to store Articles and Stories
  const [Articles, setArticles] = useState<Article[]>([]);
  const [Stories, setStories] = useState<Story[]>([]);

  // Fetch Articles
  useEffect(() => {
    const fetchArticles = async () => {
      try {
        const response = await fetch("https://khianvictorycalderon.github.io/Article-Stories-Data/articles.json");
        const data = await response.json();
        setArticles(data);
      } catch (error) {
        console.error("Error fetching articles:", error);
      }
    };
    fetchArticles();
  }, []); // Empty dependency array, runs only once when the component mounts

  // Fetch Stories
  useEffect(() => {
    const fetchStories = async () => {
      try {
        const response = await fetch("https://khianvictorycalderon.github.io/Article-Stories-Data/stories.json");
        const data = await response.json();
        setStories(data);
      } catch (error) {
        console.error("Error fetching stories:", error);
      }
    };
    fetchStories();
  }, []); // Empty dependency array, runs only once when the component mounts

  return (
    <Router>
      <ScrollToTop />
      <Routes>
        <Route path="/" element={<Home Articles={Articles} Stories={Stories} />} />
        <Route path="/article/:articleId" element={<Article Articles={Articles} />} />
        <Route path="/story/:storyId" element={<Story Stories={Stories} />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
};

export default App;
